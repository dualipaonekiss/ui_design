#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    Jun 14, 2023 11:58:12 AM +0630  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
from tkinter import filedialog
import PIL
import PIL.Image
from PIL import Image as Pil_image, ImageTk as Pil_imageTk
import pickle
import numpy as np
import os
import cv2 
from yoloWorks.yolo_work import yoloWork
from balance_work import balance_work

try:
    import Tkinter as tk 
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True
    


import kaungkaung2_support
video_path = None
videoFrame_img_size = (720, 720)

model_file_path =""
load_img =None
test_img = None
frame_width,avg_y_max, avg_x_max,avg_x_min,avg_y_min,avg_middle_bbox_x,avg_bbox_Area=0,0,0,0,0,0,0


_debug = True # False to eliminate debug printing from callback functions.


def btn_chooseVideo_action():
    print('kaungkaung2.btn_chooseVideo_action') 
    global video_path
    video_path =  filedialog.askopenfilename(initialdir = os.getcwd(),title = "Select video file : ",filetypes = (("mp4 files","*.mp4"),("all files","*.*")))
    w.txt_videopath.delete(0, 'end')
    print(video_path)
    w.txt_videopath.insert(0,video_path)

    cap = cv2.VideoCapture(video_path)
    while cap.isOpened():
        success, image = cap.read()
        if success:
            # count and measure person bbox
            cv_image = image.copy()
            cv_image = cv2.cvtColor(cv_image, cv2.COLOR_BGR2RGB)
            cv_image = cv2.resize(cv_image,videoFrame_img_size )
            kaungkaung2_support.setBackground(cv_image) 
            kaungkaung2_support.current_img = cv_image
            kaungkaung2_support.original_img = cv_image.copy()
        kaungkaung2_support.stdout.flush()
    
     
def btn_clear_line_action():
    print('kaungkaung2.btn_clear_line_action')
    kaungkaung2.stdout.flush()

def btn_load_model_action():
    print('kaungkaung2.btn_load_model_action')
    kaungkaung2.stdout.flush()

def btn_predict_line_len_action():
    print('kaungkaung2.btn_predict_line_len_action')
    kaungkaung2.stdout.flush()

def btn_video_play_action():
    print('kaungkaung2.btn_video_play_action')
    kaungkaung2.stdout.flush()



def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import kaungkaung2
    kaungkaung2.vp_start_gui()





